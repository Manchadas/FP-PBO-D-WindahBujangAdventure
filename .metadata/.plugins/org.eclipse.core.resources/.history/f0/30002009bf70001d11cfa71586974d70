package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;

import Object.SuperObject;
import entity.Player;
import tile.TileManager;

public class GamePanel extends JPanel implements Runnable{
	
	final int originalPixelSize = 16;
	final int scale = 3;
	
	public final int pixelSize = originalPixelSize * scale;
	public final int maxScreenX = 16;
	public final int maxScreenY = 12;
	public final int screenWidth = pixelSize * maxScreenX;
	public final int screenHeight = pixelSize * maxScreenY;
	
	public final int maxWorldCol = 50;
	public final int maxWorldRow = 50;
	public final int worldWidth = pixelSize * maxWorldCol;
	public final int worldHeight = pixelSize * maxWorldRow;
	
	int FPS = 60;
	
	TileManager tileM = new TileManager(this);
	
	KeyInput keyI = new KeyInput();
	
	Thread gameThread;
	
	public CollisionCheck cCheck = new CollisionCheck(this);
	
	public AssetSetter aSetter = new AssetSetter(this);
	
	public Player player = new Player(this,keyI);
	
	public SuperObject obj[] = new SuperObject[10];
	
	
	public GamePanel() {
		
		this.setPreferredSize(new Dimension(screenWidth, screenHeight));
		this.setBackground(Color.BLACK);
		this.setDoubleBuffered(true);
		this.addKeyListener(keyI);
		this.setFocusable(true);
	}
	
	public void setupGame() {
		
		aSetter.setObject();
	}
	
	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}

	@Override
	public void run() {
		
		double drawInterval = 1000000000/FPS;
		double delta = 0;
		long lastTime = System.nanoTime();
		long currentTime;
		long timer = 0;
		int drawFPS = 0;
		
		while(gameThread != null) {
			
			currentTime = System.nanoTime();
			
			delta += (currentTime - lastTime) / drawInterval;
			
			timer += (currentTime - lastTime);
			
			lastTime = currentTime;
			
			if(delta >= 1) {
				update();
				repaint();
				delta--;
				drawFPS++;
			}
			
			if(timer >= 1000000000) {
				System.out.println("FPS : " + drawFPS);
				drawFPS = 0;
				timer = 0;
			}
		}
	}
	
	public void update() {
		
		player.update();
		
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D)g;
		
		//TILE
		tileM.draw(g2);
		
		for(int i = 0; i < obj.length; i++) {
			if(obj[i] != null) {
				obj[i].draw(g2, this.gp);
			}
		}
		
		player.draw(g2);
		
		
		g2.dispose();
	}
	
}
